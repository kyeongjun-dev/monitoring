mode: "deployment"

config:
  exporters:
    otlp:
      endpoint: tempo.grafana.svc.cluster.local:4317
      tls:
        insecure: true
    prometheusremotewrite:
      endpoint: "http://kube-prometheus-stack-prometheus.prometheus.svc.cluster.local:9090/api/v1/write"
      tls:
        insecure: true
      external_labels:
        label_name: test
      # namespace를 설정하면 metric에 접두어가 붙음 : calls_total -> my_app_calls_total
      # namespace: "my_app"
    logging:
      verbosity: detailed

  extensions:
    health_check:
      endpoint: ${env:MY_POD_IP}:13133
    memory_ballast: {}

  processors:
    batch: {}
    memory_limiter: null
    attributes:
      actions:
        # - key: thread.name
        #   action: delete
        # - key: thread.id
        #   action: delete
        - key: app.name
          action: insert
          value: "springboot"
        - key: app.namespace
          action: insert
          value: "springboot"
        # - key: http.method
        #   from_attribute: http.request.method
        #   action: upsert
        # - key: http.status_code
        #   from_attribute: http.response.status_code
        #   action: upsert
        # # 기존 key는 제거
        # - key: http.response.status_code
        #   action: delete
        # - key: http.request.method
        #   action: delete
    resource:
      attributes:
        - key: cluster
          value: docker-desktop
          action: insert
        # - key: process.command_args
        #   action: delete
        # - key: process.executable.path
        #   action: delete
        # - key: process.pid
        #   action: delete
        # - key: process.runtime.description
        #   action: delete
        # - key: process.runtime.name
        #   action: delete
        # - key: process.runtime.version
        #   action: delete
        # - key: container.id	
        #   action: delete
        # - key: host.arch
        #   action: delete
        # - key: os.description	
        #   action: delete
        # - key: os.type
        #   action: delete
        # - key: service.instance.id	
        #   action: delete
        # - key: service.version
        #   action: delete
        # - key: telemetry.sdk.language	
        #   action: delete

  receivers:
    otlp:
      protocols:
        grpc:
          endpoint: ${env:MY_POD_IP}:4317
        http:
          endpoint: ${env:MY_POD_IP}:4318

  connectors:
    spanmetrics:
      histogram:
        explicit:
          buckets: [100us, 1ms, 2ms, 6ms, 10ms, 100ms, 250ms]
      dimensions:
        - name: http.request.method
          default: GET
        - name: http.response.status_code
        - name: host.name
      exemplars:
        enabled: true
      dimensions_cache_size: 1000
      aggregation_temporality: "AGGREGATION_TEMPORALITY_CUMULATIVE"
      metrics_flush_interval: 15s
      metrics_expiration: 5m
      events:
        enabled: true
        dimensions:
          - name: exception.type
          - name: exception.message
      resource_metrics_key_attributes:
        - service.name
        - telemetry.sdk.language
        - telemetry.sdk.name

  service:
    extensions:
      - health_check
      - memory_ballast
    pipelines:
      traces/in:
        receivers: [otlp]
        exporters: [logging, spanmetrics]
      metrics/out:
        receivers: [spanmetrics]
        exporters: [logging, prometheusremotewrite]
      traces:
        exporters:
          - otlp
        processors:
          - memory_limiter
          - batch
          - attributes
          - resource
        receivers:
          - otlp

image:
  repository: "otel/opentelemetry-collector-contrib"
  pullPolicy: IfNotPresent
  tag: "0.101.0"